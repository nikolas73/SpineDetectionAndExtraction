tic;

filepath='C:\Users\pankaj singh\Desktop\Read\MatlabExp\TaraKeck\Stack1\Common\Log_Common\Check\';
fSeg='Log_Common_16_Edited';
fEnd='Log_Common_16_detectedEndPoints';

data= RAWfromMHD(fSeg,[],filepath); % segmented binary volume

newdata=RAWfromMHD(fEnd,[],filepath); % endpoints generated by the front propagation algorithm

endpoints=find(newdata==1); % the indices of the endpoints


[x,y,z]=ind2sub(size(newdata),endpoints); % converting the indices to the subscripts(x,y,z-coordinates)

matrix=[x,y,z]; % the (x,y,z) coordinates of the points of all the endpoints in matrix form


radius=10; % the radius of the neighbourhood of each point(voxel) to be considered


num_endpoints=numel(endpoints);% number of endpoints

dist=zeros(num_endpoints);% create a matrix to store the distances betweeen endpoints

for i=1:num_endpoints
    for j=1:num_endpoints
        dist(i,j)=norm(matrix(i,:)-matrix(j,:)); % Euclidean distance between ith and jth endpoints
    end
end

error=2; % allowed error(number for voxels outside the solid)

store=zeros(num_endpoints);

S=zeros(size(data));
T=zeros(size(data));
A=zeros(1,num_endpoints);
B=zeros(1,num_endpoints);

sidelen=3;

T(endpoints)=1;


xdim=size(data,1);
ydim=size(data,2);
zdim=size(data,3);

length=0;
intensity=0;

for t=1:num_endpoints
    
    p=matrix(t,:); % one of the endpoints(first end point)
    
    for s=t:num_endpoints
        
        if (dist(t,s)<radius && dist(t,s)>0) % looking for the points in the nbd of the first one
            
            q=matrix(s,:); % a point in the nbd of the first point p1
            
            count=zeros(sidelen,sidelen,sidelen);
            
            for i=1:sidelen
                for j=1:sidelen
                    
                    for k=1:sidelen
                        
                        
                        p1=[p(1)+sidelen-1-i,p(2)+2+sidelen-1-j,p(3)+sidelen-1-k];
                        p2=[q(1)+sidelen-1-i,q(2)+sidelen-1-j,q(3)+sidelen-1-k];
                        
                        %                         if (1<= p1(1)<= size(data,1)...
                        %                                 && 1<= p2(1)<= size(data,1)...
                        %                                 && 1<= p1(2)<= size(data,2)...
                        %                                 && 1<= p2(2)<= size(data,2)...
                        %                                 && 1<= p1(3)<= size(data,3)...
                        %                                 && 1<= p2(3)<= size(data,3)...
                        %                                 && data(p1(1),p1(2),p1(3))==1 && data(p2(1),p2(2),p2(3))==1)
                        
                        if all(1<= p1(1)&& p1(1)<= xdim && 1<= p2(1)&& p2(1)<= xdim ... 
                                &&1<= p1(2)&& p1(2)<= ydim && 1< p2(2)&& p2(2)<= ydim ...
                                && 1< p1(3)&&  p1(3)<=zdim && 1< p2(3) && p2(3)<=zdim )
                           % && data(p1(1),p1(2),p1(3))==1 && data(p2(1),p2(2),p2(3))==1 ...
                        
                            % the length along the line segment(length) and the number of voxels
                            % it passes through the solid(intensity)
                            [length, intensity]=LengthAndIntensity(data,p1,p2);
                        
                        
                        if (length >0 && length <= intensity+error)
                            count(i,j,k)=1;
                        end
                       
                        end
                    end
                end
            end
            
            if nnz(count)>0
                
                store(t,s)=1; %meaning that endpoints corresponding to t and s are on the same spine
                
                T(endpoints(t))=0;
            end
        end
    end
    
    
    
    B(t)=sum(store(t,:)); % total number of additional points on the same spine(with label t)
    
    % T(endpoints(t))=1;
    
end

multiDet=find(store>0); % store(t,s)>0 means endpoints t and s are on the same spine


[icord,jcord]=ind2sub(size(store),multiDet); % extracting (t,s) coordinates

[multPts,~]=size(icord); % multPts= the number of spines(structures) having mutliple endpoints

connection=zeros(1,multPts);

T=zeros(size(data));

for i=1:multPts
    
    connection(i)=sum(store(icord(i),:)); % number of additional points on a spine
    
    num_con=connection(i); % number of additional points on a spine
    
    nbr=find(store(icord(i),:)>0); % find the nbrs for ith spine
    
    endpts=endpoints(nbr);
    
    initialpt=endpoints(icord(i));
    S(endpts)=1;
    S(initialpt)=1;
    
    [inx,iny,inz]= ind2sub(size(newdata),initialpt);
    
    [xcor,ycor,zcor]=ind2sub(size(newdata),endpts);
    
    sum_mat=[sum(xcor),sum(ycor),sum(zcor)];
    
    cor=round((1/(1+numel(nbr)))*([inx,iny,inz]+sum_mat));
    
    index=sub2ind(size(newdata),cor(1),cor(2),cor(3));
    T(index)=1;
    
end



%  mulDet=find(B>0);
%
%  T(endpoints(mulDet))=0;
%
%  for k=1:numel(mulDet)
%
%      nbrs=find(store(k,:)==1); % the endpoint(s) which is(are) the neighbour(s) of the point t
%
%      %ind2sub(
%      endpts=endpoints(nbrs);
%
%      initialpt=endpoints(mulDet(k));
%
%      [inx,iny,inz]= ind2sub(size(newdata),initialpt);
%
%      [xcor,ycor,zcor]=ind2sub(size(newdata),endpts);
%
%      sum_mat=[sum(xcor),sum(ycor),sum(zcor)];
%
%      cordinate=round((1/(1+numel(nbrs)))*([inx,iny,inz]+sum_mat));
%
%      T(cordinate)=1;
%
%  end
%



% Length=zeros(num_endpoints);
%
% Sum_intensity=zeros(num_endpoints);
%
% for k=1:num_endpoints
%
%     p1=[x(k),y(k),z(k)];
%
%   for j=k:num_endpoints
%
%       p2=[x(j),y(j),z(j)];
%
%     [Length(k,j), Sum_intensity(k,j)]=LengthAndIntensity(data,p1,p2);
%
%     %Length(k,j)=length_line;
%
%     %Sum_intensity(k,j)=sum_alongLine;
%   end
% end
%
%
%
% a=zeros(num_endpoints);
% voxthres=3;% threshold on the number of voxels
% maxlen=20; % radius(in terms of number of pixels) of the neighbourhood of each endpoint
%
%
% for i=1:num_endpoints
%     for j=1:num_endpoints
%
%        %if (Length(i,j)>0 && (Length(i,j)==Sum_intensity(i,j)|| Length(i,j)==Sum_intensity(i,j)+2 ))
%         if (Length(i,j)>0 && Length(i,j)< maxlen && (Length(i,j)<=Sum_intensity(i,j)+voxthres ))
%            a(i,j)=1;
%        end
%     end
% end
%
% sim=find(a==1);
% [icor,jcor]=ind2sub(size(a),sim);
%
% ipoints=endpoints(icor);
% jpoints=endpoints(jcor);
%
% Z= zeros(size(data));
%
% Z(ipoints)=1;
%
% Z(jpoints)=1;

T=uint8(T);
S=uint8(S);

%WriteRAWandMHD(T,strcat(fEnd,'_merged'),filepath);

WriteRAWandMHD(S,strcat(fEnd,'_Cyl','_',num2str(error)),filepath);

% clear all
toc;


